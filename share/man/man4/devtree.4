.Dd May 4, 2012
.Dt DEVTREE 4
.Os
.Sh NAME
.Nm devtree
.Nd interface to the kernel's device tree
.Sh SYNOPSIS
.Cd pseudo-device devtree
.Sh DESCRIPTION
.Nm
is an interface to the device tree generated by boot-time
autoconfiguration and (potentially) mutated at run-time as devices are
added to and removed from hot-plug interfaces such as
.Xr usb 4
or
.Xr pcmcia 4 .
.Pp
When a device unit is opened, commands are issued by writing to it and
responses (and potentially asynchronous messages) are obtained by
reading from it.  Calls such as
.Xr select 2
or
.Xr poll 2
may be used to wait for something to be available to read; nonblocking
mode is supported, but asynchronous mode is not.
.Pp
All the manifest constants described below are obtained by including
.Aq Pa dev/pseudo/devtree-intf.h .
.Pp
Each
.Xr write 2
is a separate command; a command may not be split between writes, and
only one command is processed per
.Xr write 2 .
A command consists of a single octet giving the command code; some
commands take an additional octet of data.  The commands are:
.Bl -tag -width indent
.It Dv DTCMD_VERBOSE
This takes one additional octet of data, which is
.Dv DTCMD_ARG_ON
to turn verbosity on or
.Dv DTCMD_ARG_OFF
to turn verbosity off.  (Other second octets produce an
.Dv EIO
error.)  When verbosity is on, console messages designed to help
someone debugging the driver are generated.  (This is not intended for
general-purpose use.)
.It Dv DTCMD_WATCH
This takes one additional octet of data, which is
.Dv DTCMD_ARG_ON
to turn watching on for this unit or
.Dv DTCMD_ARG_OFF
to turn it off.  (Other second octets produce an
.Dv EIO
error.)  When watching is on, the unit receives messages when devices
are attached and detached; see the message descriptions below.
.It Dv DTCMD_OVERRUN
This takes no additional data.  It is part of the buffer-overrun
indication mechanism; see the
.Dv DTMSG_OVERRUN
description, below, for a full description.
.It Dv DTCMD_TREE
This takes no additional data.  It requests a full dump of the device
tree, which is generated as a burst of one or more
.Dv DTMSG_TREE
messages.  See the
.Dv DTMSG_TREE
description, below, for details (but see also
.Dv DTMSG_OVERRUN Ap s
description for an important note).
.El
.Pp
Messages read from the device take the same basic form, but often have
multiple additional data octets.  The possible message type octets and
their semantics are:
.Bl -tag -width indent
.It Dv DTMSG_ATTACH_REAL
This indicates that a device has attached.  This is a
.Sq real
device, as opposed to a pseudo-device.  There are always at least two
octets of additional data, with a variable number of additional octets
following.  The first data octet gives the length of the device name
string; the string itself appears following the second data octet.  If
the device is a device tree root (ie, it has no parent), the second
data octet is 0xff; otherwise, it is the length of the device's
parent's device name string, with the string's contents following the
device name string's contents.  Except for the case of a parentless
device, the total number of data octets is 2 plus the sum of the first
two data octets (for a parentless device, it's 2 plus the first data
octet).
.It Dv DTMSG_ATTACH_PSEUDO
This indicates that a pseudo-device has attached.  There is always at
least one octet of additional data, with a variable number following.
The first data octet gives the length of the device name string, with
the string itself following immediately.  The number of data octets is
one more than the first data octet.
.It Dv DTMSG_DETACH
This indicates that a device has detached.  The following data is
formatted as for
.Dv DTMSG_ATTACH_PSEUDO ,
giving the name of the device in question.  (When detaching, there is
no explicit indication whether the device is real or pseudo.)
.It Dv DTMSG_OVERRUN
This indicates that the kernel's buffer has overflowed.  No data octets
follow.  Once this is generated, no further messages are generated
until (1) all queued messages are read and (2) a
.Dv DTCMD_OVERRUN
command is written.  (If a
.Dv DTCMD_OVERRUN
command is attempted when something is queued to be read, the write
will fail showing
.Er EINVAL . )
Once a
.Dv DTMSG_OVERRUN
message is generated and before it is cleared with a successful
.Dv DTCMD_OVERRUN ,
no attach/detach messages will be generated even if watching is
enabled, and
.Dv DTCMD_TREE
commands will elicit no
.Dv DTMSG_TREE
messages.
.It Dv DTMSG_TREE
This is used to carry the response to
.Dv DTCMD_TREE .
When
.Dv DTCMD_TREE
is issued, a burst of
.Dv DTMSG_TREE
messages is generated, describing the then-current state of the device
tree.  Each
.Dv DTMSG_TREE
message has at least one octet of data following the
.Dv DTMSG_TREE
type octet.  Except for the last one (see below), each one describes
one device (node in the device tree) and has at least two data octets.
The first data octet gives the length of the device's name; the name
itself consists of that many octets following the second data octet.
If the device has a parent, the second data octet gives the length of
the parent's name, with the name itself following the device name; if
the device has no parent, the second data octet is 0xff, and no parent
name string follows the device's name string.  Once the entire device
tree has been returned, one more
.Dv DTMSG_TREE
message is generated, with only one data octet, that one being 0xff.
.Pp
The correct way to reliably track the state of the device tree is to
first enable watching with
.Dv DTCMD_WATCH ,
then request the device tree with
.Dv DTCMD_TREE .
Then ignore any messages that may appear before the burst of
.Dv DTMSG_TREE
messages; after the final
.Dv DTMSG_TREE ,
track device attachment and detachment via
.Dv DTMSG_ATTACH_REAL ,
.Dv DTMSG_ATTACH_PSEUDO ,
and
.Dv DTMSG_DETACH
messages.  (See the
.Sx BUGS
section for a relevant note.)
.El
.Pp
Normally, there is only one
.Nm
device node in
.Pa /dev
(usually
.Pa /dev/devtree ) ,
since there is usually no need to have more than one process watching
the device tree.  However, the driver does support multiple nodes, up
to a maximum defined in the source (at this writing, 256).
.Sh SEE ALSO
.Xr drvctl 8 ,
which provides complementary data.
.Sh HISTORY
.Nm
appeared in May 2012 in patches to
.Nx 1.4T
and
.Nx 4.0.1 .
.Sh BUGS
When using
.Dv DTCMD_TREE as described above, there is a small risk of overrun.
While the device tree is always returned in its entirety, even if the
amount of data would overrun the usual buffer limit, if it is large
enough to overflow and then a device attach or detach occurs before
userland reads enough to drain the queue below the buffer limit, an
overrun will occur.
.Pp
Should be a cloning device rather than having multiple traditional
units.
